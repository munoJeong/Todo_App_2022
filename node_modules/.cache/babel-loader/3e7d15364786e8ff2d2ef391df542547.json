{"ast":null,"code":"var _jsxFileName = \"C:\\\\todo_app_2022\\\\src\\\\Average.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getAverage = lists => {\n  console.log('평균값 계산중..');\n  if (lists.length === 0) return 0;\n  const sum = lists.reduce((a, b) => a + b);\n  return sum / lists.length;\n};\n//useMemo() 렌더링 하는 과정에서 \n\nexport default function Average() {\n  _s();\n  const [lists, setLists] = useState([]);\n  const [number, setNumber] = useState('');\n  const inputEl = useRef(null); // Dom(html요소)을 조작하는 ID처럼 사용\n\n  // const onChange = e =>{\n  //   console.log('컴포넌트가 처음 렌더링 될 때만 함수 생성..');\n  //   setNumber(e.target.value);\n  // }\n\n  const onChange = useCallback(e => {\n    console.log('컴포넌트가 처음 렌더링 될 때만 함수 생성..');\n    setNumber(e.target.value);\n  }, []); // 컴포넌트가 처음 렌더링 될 때만 함수 생성\n\n  const onInsert = useCallback(e => {\n    console.log('number 혹은 list가 바뀌었을때만 함수 생성');\n    const nextLists = lists.concat(parseInt(number));\n    setLists(nextLists);\n    setNumber('');\n    inputEl.current.focus();\n  }, [number, lists]); //number 혹은 list 가 바뀌었을때만 함수 생성\n\n  const avg = () => getAverage(lists);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: number,\n      onChange: onChange,\n      ref: inputEl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onInsert,\n      children: \"\\uB4F1\\uB85D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: lists.map((list, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: list\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"\\uD3C9\\uADE0\\uAC12 : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 12\n      }, this), avg]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(Average, \"0dxBqMMz8d97zW1FqUPM4E+Vfq0=\");\n_c = Average;\nvar _c;\n$RefreshReg$(_c, \"Average\");","map":{"version":3,"names":["React","useState","useRef","useCallback","getAverage","lists","console","log","length","sum","reduce","a","b","Average","setLists","number","setNumber","inputEl","onChange","e","target","value","onInsert","nextLists","concat","parseInt","current","focus","avg","map","list","index"],"sources":["C:/todo_app_2022/src/Average.js"],"sourcesContent":["import React, {useState, useRef, useCallback} from 'react'\r\n\r\nconst getAverage = lists =>{\r\n  console.log('평균값 계산중..');\r\n  if (lists.length === 0) return 0;\r\n  const sum = lists.reduce((a,b) => a+b);\r\n  return sum/lists.length;\r\n\r\n}\r\n//useMemo() 렌더링 하는 과정에서 \r\n\r\nexport default function Average() {\r\n  const [lists, setLists] = useState([]);\r\n  const [number, setNumber]  = useState('');\r\n  const inputEl = useRef(null); // Dom(html요소)을 조작하는 ID처럼 사용\r\n\r\n  // const onChange = e =>{\r\n  //   console.log('컴포넌트가 처음 렌더링 될 때만 함수 생성..');\r\n  //   setNumber(e.target.value);\r\n  // }\r\n\r\n  const onChange = useCallback(e =>{\r\n    console.log('컴포넌트가 처음 렌더링 될 때만 함수 생성..');\r\n    setNumber(e.target.value);\r\n  },[]); // 컴포넌트가 처음 렌더링 될 때만 함수 생성\r\n\r\n  const onInsert = useCallback(e =>{\r\n    console.log('number 혹은 list가 바뀌었을때만 함수 생성');\r\n    const nextLists = lists.concat(parseInt(number));\r\n    setLists(nextLists);\r\n    setNumber('');\r\n    inputEl.current.focus();\r\n  },[number,lists]); //number 혹은 list 가 바뀌었을때만 함수 생성\r\n\r\n  const avg = () => getAverage(lists);\r\n  return (\r\n    <div>\r\n      <input value={number} onChange={onChange} ref={inputEl} />\r\n      <button onClick={onInsert}>등록</button>\r\n      <ul>\r\n        {lists.map((list,index) =>(\r\n          <li key={index}>{list}</li>\r\n        ))}\r\n      </ul>\r\n      <div><b>평균값 : </b>{avg}</div>\r\n    </div>\r\n  )\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,MAAM,EAAEC,WAAW,QAAO,OAAO;AAAA;AAE1D,MAAMC,UAAU,GAAGC,KAAK,IAAG;EACzBC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;EACxB,IAAIF,KAAK,CAACG,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC;EAChC,MAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAM,CAAC,CAACC,CAAC,EAACC,CAAC,KAAKD,CAAC,GAACC,CAAC,CAAC;EACtC,OAAOH,GAAG,GAACJ,KAAK,CAACG,MAAM;AAEzB,CAAC;AACD;;AAEA,eAAe,SAASK,OAAO,GAAG;EAAA;EAChC,MAAM,CAACR,KAAK,EAAES,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACc,MAAM,EAAEC,SAAS,CAAC,GAAIf,QAAQ,CAAC,EAAE,CAAC;EACzC,MAAMgB,OAAO,GAAGf,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9B;EACA;EACA;EACA;;EAEA,MAAMgB,QAAQ,GAAGf,WAAW,CAACgB,CAAC,IAAG;IAC/Bb,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IACxCS,SAAS,CAACG,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC3B,CAAC,EAAC,EAAE,CAAC,CAAC,CAAC;;EAEP,MAAMC,QAAQ,GAAGnB,WAAW,CAACgB,CAAC,IAAG;IAC/Bb,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC3C,MAAMgB,SAAS,GAAGlB,KAAK,CAACmB,MAAM,CAACC,QAAQ,CAACV,MAAM,CAAC,CAAC;IAChDD,QAAQ,CAACS,SAAS,CAAC;IACnBP,SAAS,CAAC,EAAE,CAAC;IACbC,OAAO,CAACS,OAAO,CAACC,KAAK,EAAE;EACzB,CAAC,EAAC,CAACZ,MAAM,EAACV,KAAK,CAAC,CAAC,CAAC,CAAC;;EAEnB,MAAMuB,GAAG,GAAG,MAAMxB,UAAU,CAACC,KAAK,CAAC;EACnC,oBACE;IAAA,wBACE;MAAO,KAAK,EAAEU,MAAO;MAAC,QAAQ,EAAEG,QAAS;MAAC,GAAG,EAAED;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAG,eAC1D;MAAQ,OAAO,EAAEK,QAAS;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAY,eACtC;MAAA,UACGjB,KAAK,CAACwB,GAAG,CAAC,CAACC,IAAI,EAACC,KAAK,kBACpB;QAAA,UAAiBD;MAAI,GAAZC,KAAK;QAAA;QAAA;QAAA;MAAA,QACf;IAAC;MAAA;MAAA;MAAA;IAAA,QACC,eACL;MAAA,wBAAK;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAa,EAACH,GAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QAAO;EAAA;IAAA;IAAA;IAAA;EAAA,QACzB;AAEV;AAAC,GApCuBf,OAAO;AAAA,KAAPA,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module"}